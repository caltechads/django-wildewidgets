[project]
name = "django_wildewidgets"
version = "1.2.0"
description = "django-wildewidgets is a Django design library providing several tools for building full-featured, widget-based web applications with a standard, consistent design, based on Bootstrap."
readme = "README.md"
requires-python = ">=3.10"
authors = [
    {name = "Caltech IMSS ADS", email = "imss-ads-staff@caltech.edu"}
]
keywords = ["design", "widget", "django"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Framework :: Django",
    "Framework :: Django :: 4.2",
    "Framework :: Django :: 5",
    "Framework :: Django :: 5.1",
    "Framework :: Django :: 5.2"
]
dependencies = [
    "django >= 5.1",
    "django-crispy-forms >= 2.4",
    "crispy-bootstrap5 >= 2025.6"
]

[project.urls]
Homepage = "https://github.com/caltechads/django-wildewidgets"


[tool.uv]
python-preference = "only-system"
default-groups = ["docs", "test"]

[dependency-groups]
dev = [
  "ipython>=7.27.0",
  "django-stubs==5.1.1",
  "build>=1.2.2.post1",
]
docs = [
  "Sphinx<7",
  "pydata-sphinx-theme <= 2.0.0",
  "sphinxcontrib-images >= 0.9.4",
  "setuptools>=75.1.0",
  "sphinxcontrib-django>=2.5",
]
test = [
  "unittest-xml-reporting>=3.0.4",
  "testfixtures>=6.17.0",
  "coverage>=5.0.3",
  "django-coverage-plugin>=1.8.0",
  "factory-boy>=2.12.0",
]

[build-system]
requires = [
  "setuptools >= 48",
  "wheel >= 0.29.0",
]
build-backend = "setuptools.build_meta"

[tool.setuptools]
# ...
# By default, include-package-data is true in pyproject.toml, so you do
# NOT have to specify this line.
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]

[tool.mypy]
exclude = "(^build/.*$|^docs/.*\\.py$|test_.*\\.py$)"
# Django has a lot of magic that makes attributes appear after instance instantiation,
# so we need to disable this check.
disable_error_code = ["attr-defined"]

[[tool.mypy.overrides]]
module = "django.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "setuptools.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "redis.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "dal.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "braces.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "sphinx_rtd_theme.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "crispy_forms.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "environ.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "debug_toolbar.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "wildewidgets.*.migrations.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "requests.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "structlog.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "django_extensions.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pygments.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "bleach.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "altair.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pandas.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "chartjs.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "book_manager.*"
ignore_missing_imports = true


[tool.ruff]
# Same as Black.
line-length = 88
indent-width = 4
target-version = "py310"
src = ["ads_dev_ops"]
exclude = [".venv", "build", "dist", "*/tests*", "*/migrations/*"]

[tool.ruff.lint]
select = ["ALL"]
fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
ignore = [
    #### modules
    "ANN", # flake8-annotations
    "COM", # flake8-commas
    "C90", # mccabe complexity
    "TID", # flake8-tidy-imports

    #### specific rules
    "CPY001",   # ignore missing copyright notices
    "D100",     # Missing docstring in public module
    "D102",     # Missing docstring in public method
    "D103",     # Missing docstring in public function
    "D104",     # Missing docstring in public package
    "D105",     # Missing docstring in magic method
    "D106",     # Missing docstring in nested class
    "D107",     # ignore Missing docstring in __init__ method
    "D200",     # One-line docstring should fit on one line
    "D203",     # 1 blank required before class docstring
    "D205",     # 1 blank line required between summary line and description
    "D211",     # No blank lines allowed before class docstring
    "D212",     # Multi-line docstring summary should start at the first line
    "D400",     # First line should end with a period
    "D401",     # First line of docstring should be in imperative mood
    "D415",     # First line should end with a period, question mark, or exclamation point
    "DOC201",   # Ignore missing "Return" section in docstring
    "E402",     # false positives for local imports
    "FIX002",   # Line contains "TODO", consider resolving the issue
    "N818",     # stop bugging me about not ending my exceptions with "Error"
    "PLC0415",  # Ignore imports that aren't at the top level. Sometimes that's needed to avoid circular imports.
    "S603",     # ignore subprocess calls that do not check return code
    "S607",     # ignore subprocess programs that are not absolute paths
    "SIM102",   # combine nested ifs
    "SLF001",   # Ignore access to attributes starting with a single _. Django's Model._meta is used all over the place.
    "TD002",    # Missing author in TODO; try: # TODO(<author_name>): ... or # TODO @<author_name>:
    "TD003",    # Missing issue link on the line following this TODO
    "FBT001",   # stop bugging me about booleans in function signatures
    "FBT002",   # stop bugging me about booleans in function signatures
    "PT009",    # use regular assert instead of unittest asserts
]


[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
# Disable auto-formatting of code examples in docstrings
docstring-code-format = false
# Set the line length limit used when formatting code snippets in
# docstrings.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.pylint]
# Django signal handlers use a lot of positional args.
max-args = 10
max-positional-args = 10

[tool.vulture]
# Configuration for vulture: https://github.com/jendrikseipp/vulture
# Install in your virtual environment and run:
# python -m vulture | tail -r | less
# The below configuration tries to remove some false positives, but there are
# still many, for example for model properties used only in templates.
# See also:
# https://adamj.eu/tech/2023/07/12/django-clean-up-unused-code-vulture/
exclude = [
  "*/settings.py",
  "*/gunicorn_config.py",
  "*/settings/*.py",
  "*/migrations/*.py",
]
ignore_decorators = [
  # Django
  "@receiver",
  "@register.filter",
  "@register.inclusion_tag",
  "@register.simple_tag",
  # django.contrib.admin
  "@admin.action",
  "@admin.display",
  "@admin.register",
  # pytest
  "@pytest.fixture",
]
ignore_names = [
  # Django
  "*Config",  # AppConfig subclasses
  "*Middleware",
  "clean_*",
  "Meta",
  "urlpatterns",
  # django.contrib.admin
  "get_extra",
  "get_fieldsets",
  "has_add_permission",
  "has_change_permission",
  "has_delete_permission",
  "has_view_permission",
  "lookups",
]
paths = [
  "example",
]
min_confidence = 80
sort_by_size = true
